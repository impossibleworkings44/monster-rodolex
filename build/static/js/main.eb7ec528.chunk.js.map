{"version":3,"sources":["components/card/card.component.js","components/cardlist/card-list-component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAGaA,EAAO,SAACC,GAAD,OACpB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,gBACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHTC,EAAW,SAAAR,GACpB,OAAO,sBAAKC,UAAU,YAAf,cAA6BD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1D,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHbM,G,MAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACpB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC4CHG,E,kDA7Cb,aAAc,IAAD,8BACX,gBAmBFH,aAAa,SAACI,GAEZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAnBpC,EAAKC,MAAM,CACZb,SAAS,GACTU,YAAY,IALA,E,qDAcf,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACT,SAASkB,S,oBASrC,WAEE,MAA6BC,KAAKN,MAA3Bb,EAAP,EAAOA,SAASU,EAAhB,EAAgBA,YACVU,EAAgBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAEA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAE/F,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACGW,YAAY,iBACZC,aAAce,KAAKf,eAEtB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAxCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eb7ec528.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) =>(\r\n<div className=\"card-container\">\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}??set=set2`}/>\r\n    <h1>{props.monster.name}</h1>\r\n    <p>{props.monster.email}</p>\r\n</div>\r\n)","import React from 'react'\r\nimport './card-list.style.css'\r\nimport {Card} from  '../card/card.component'\r\n\r\nexport const CardList = props => {\r\n    return <div className=\"card-list\"> {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster} />\r\n    ))}</div>\r\n}","import React from 'react'\r\nimport './search-box.style.css'\r\n\r\n export const SearchBox=({placeholder,handleChange})=>(\r\n    <input\r\n        className='search'\r\n        type=\"search\" \r\n        placeholder={placeholder}\r\n        onChange={handleChange}/>\r\n)\r\n\r\n\r\n\r\n\r\n\r\n","import './App.css';\nimport React ,{Component} from 'react';\nimport {CardList} from './components/cardlist/card-list-component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component\n{\n  constructor(){\n    super();\n\n    this.state={\n   monsters:[],\n   searchField:''\n  }\n\n // this.handleChange=this.handleChange.bind(this);\n /*\n  used to bind this from component to the userdefined fn \n  no need for this if we use arrow fn for user defined fn\n*/\n}\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response=>response.json())\n  .then(users=>this.setState({monsters:users}));\n}\n\n  handleChange=(e)=>{\n    \n    this.setState({searchField:e.target.value});\n\n  }\n\n  render()\n  {\n    const {monsters,searchField}=this.state;\n    const filteredMonster=monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return(\n      <div className=\"App\">\n        <h1> Monsters Rodolex </h1>\n        <SearchBox\n           placeholder=\"search monster\" \n           handleChange={this.handleChange}/>\n\n        <CardList monsters={filteredMonster}/>\n\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}